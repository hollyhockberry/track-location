// beacon/main.cpp - iBeacon advertiser
// Based on 'BLE_iBeacon.ino' from https://github.com/h2zero/NimBLE-Arduino
//
// Copyright (c) 2021 Inaba
// This software is released under the MIT License.
// http://opensource.org/licenses/mit-license.php

#include <Arduino.h>
#include "NimBLEDevice.h"
#include "NimBLEBeacon.h"

namespace {

// UUID generated by uuidgen
const char* BEACON_UUID = "7626EE90-9058-4BA7-B28B-A4E3B1C81583";
const uint16_t MAJOR = 0x1000;
const uint16_t MINOR = 0x1000;

const uint32_t ADVERTISING_SEC = 10;
const uint64_t SLEEP_TIME_SEC = 10;

void setBeacon(BLEAdvertising* advertising) {
  BLEBeacon oBeacon = BLEBeacon();
  // fake Apple 0x004C LSB (ENDIAN_CHANGE_U16!)
  oBeacon.setManufacturerId(0x4C00);
  oBeacon.setProximityUUID(BLEUUID(BEACON_UUID));
  oBeacon.setMajor(MAJOR);
  oBeacon.setMinor(MINOR);
  BLEAdvertisementData oAdvertisementData = BLEAdvertisementData();
  BLEAdvertisementData oScanResponseData = BLEAdvertisementData();

  oAdvertisementData.setFlags(0x04);  // BR_EDR_NOT_SUPPORTED 0x04

  std::string strServiceData = "";
  strServiceData += static_cast<char>(26);
  strServiceData += static_cast<char>(0xFF);
  strServiceData += oBeacon.getData();
  oAdvertisementData.addData(strServiceData);

  advertising->setAdvertisementData(oAdvertisementData);
  advertising->setScanResponseData(oScanResponseData);

  advertising->setAdvertisementType(BLE_GAP_CONN_MODE_NON);
}

}  // namespace

void setup() {
  BLEDevice::init("");
  BLEAdvertising* advertising = BLEDevice::getAdvertising();
  setBeacon(advertising);

  advertising->start();
  ::delay(ADVERTISING_SEC*1000);
  advertising->stop();

  ::esp_deep_sleep(SLEEP_TIME_SEC*1000*1000LL);
}

void loop() {
}
